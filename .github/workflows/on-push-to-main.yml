name: On push to main

on:
  push:
    branches: [main]

permissions:
  contents: write
  pull-requests: write

env:
  CARGO_TERM_COLOR: always
  MOMENTO_API_KEY: ${{ secrets.ALPHA_TEST_AUTH_TOKEN }}
  RUSTFLAGS: --print=native-static-libs -C strip=symbols
  MACOSX_DEPLOYMENT_TARGET: 15.0

jobs:
  rustfmt:
    name: Style & Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: rustfmt
        run: make format

      - name: Rigorous lint via Clippy
        run: make lint

  build-and-test-ubuntu-x64:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      - uses: Swatinem/rust-cache@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          profile: minimal # minimal component installation (ie, no documentation)

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --locked --release

      - name: Show version information (Rust, cargo, GCC)
        shell: bash
        run: |
          gcc --version || true
          rustup -V
          rustup toolchain list
          rustup default
          cargo -V
          rustc -V

      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19.x

      - name: Find .h file
        run: |
          ls target
        shell: bash

      - name: Find .a file
        run: |
          ls target/release
        shell: bash

      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19.x

      - name: Test Go example
        run: |
          cp target/release/libmomento_protosocket_ffi.a examples/golang/libmomento_protosocket_ffi.a
          cp target/momento-protosocket-ffi.h examples/golang/momento-protosocket-ffi.h
          cd examples/golang
          go run main.go

  build-and-test-ubuntu-arm64:
    runs-on: ubuntu-24.04-arm
    steps:
      - uses: actions/checkout@v4

      - uses: Swatinem/rust-cache@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          profile: minimal # minimal component installation (ie, no documentation)

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --locked --release

      - name: Show version information (Rust, cargo, GCC)
        shell: bash
        run: |
          gcc --version || true
          rustup -V
          rustup toolchain list
          rustup default
          cargo -V
          rustc -V

      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19.x

      - name: Find .h file
        run: |
          ls target
        shell: bash

      - name: Find .a file
        run: |
          ls target/release
        shell: bash

      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19.x

      - name: Test Go example
        run: |
          cp target/release/libmomento_protosocket_ffi.a examples/golang/libmomento_protosocket_ffi.a
          cp target/momento-protosocket-ffi.h examples/golang/momento-protosocket-ffi.h
          cd examples/golang
          go run main.go

  build-and-test-macos-x64:
    runs-on: macos-15-intel
    steps:
      - uses: actions/checkout@v3

      - name: Install protoc
        run: brew install protobuf

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          profile: minimal # minimal component installation (ie, no documentation)

      - name: Show version information (Rust, cargo, GCC)
        shell: bash
        run: |
          gcc --version || true
          rustup -V
          rustup toolchain list
          rustup default
          cargo -V
          rustc -V

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --locked --release
  
      - name: Find .h file
        run: |
          ls target
        shell: bash

      - name: Find .a file
        run: |
          ls target/release
        shell: bash

      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19.x

      - name: Try testing with example
        run: |
          cp target/release/libmomento_protosocket_ffi.a examples/golang/libmomento_protosocket_ffi.a
          cp target/momento-protosocket-ffi.h examples/golang/momento-protosocket-ffi.h
          cd examples/golang
          go run main.go

  build-and-test-macos-arm64:
    runs-on: macos-15
    steps:
      - uses: actions/checkout@v3

      - name: Install protoc
        run: brew install protobuf

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          profile: minimal # minimal component installation (ie, no documentation)

      - name: Show version information (Rust, cargo, GCC)
        shell: bash
        run: |
          gcc --version || true
          rustup -V
          rustup toolchain list
          rustup default
          cargo -V
          rustc -V

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --locked --release
  
      - name: Find .h file
        run: |
          ls target
        shell: bash

      - name: Find .a file
        run: |
          ls target/release
        shell: bash

      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19.x

      - name: Try testing with example
        run: |
          cp target/release/libmomento_protosocket_ffi.a examples/golang/libmomento_protosocket_ffi.a
          cp target/momento-protosocket-ffi.h examples/golang/momento-protosocket-ffi.h
          cd examples/golang
          go run main.go

  # TODO: readme generation

  release-please:
    name: Release Please
    runs-on: ubuntu-latest
    # needs: [generate_readme]
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      version: ${{ steps.release.outputs.version }}
    steps:
      - uses: googleapis/release-please-action@v4
        id: release
        with:
          token: ${{ secrets.MOMENTO_MACHINE_USER_GITHUB_TOKEN }}   

  build-and-publish-ubuntu-x64:
    runs-on: ubuntu-24.04
    needs: [release-please]
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.MOMENTO_MACHINE_USER_GITHUB_TOKEN }}

      - uses: Swatinem/rust-cache@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          profile: minimal # minimal component installation (ie, no documentation)

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --locked --release

      - name: Show version information (Rust, cargo, GCC)
        shell: bash
        run: |
          gcc --version || true
          rustup -V
          rustup toolchain list
          rustup default
          cargo -V
          rustc -V

      - name: Find .h file
        run: |
          ls target
        shell: bash

      - name: Find .a file
        run: |
          ls target/release
        shell: bash

      - name: Print version number
        run: |
          echo "Version number: ${{ needs.release-please.outputs.version }}"

      - name: Publish the C static library and header file
        run: |
          VERSION=${{ needs.release-please.outputs.version }}
          ARCHIVE_FILE="momento-protosocket-ffi-$VERSION.x86_64-linux.tar.gz"
          HEADER_FILE="./target/momento-protosocket-ffi.h"
          LIBRARY_FILE="./target/release/libmomento_protosocket_ffi.a"
          tar -zcvf $ARCHIVE_FILE $HEADER_FILE $LIBRARY_FILE
          AUTH="Authorization: token ${{ secrets.MOMENTO_MACHINE_USER_GITHUB_TOKEN }}"
          LATEST_RELEASE=$(curl -sH "$AUTH" https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/tags/v${VERSION})
          RELEASE_ID=$(echo $LATEST_RELEASE | jq -r .id)
          GH_ASSET="https://uploads.github.com/repos/${GITHUB_REPOSITORY}/releases/${RELEASE_ID}/assets?name=${ARCHIVE_FILE}"
          echo $GH_ASSET
          curl --data-binary @$ARCHIVE_FILE -H "$AUTH" -H "Content-Type: application/octet-stream" $GH_ASSET
        shell: bash

  build-and-publish-ubuntu-arm64:
    runs-on: ubuntu-24.04-arm
    needs: [release-please]
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.MOMENTO_MACHINE_USER_GITHUB_TOKEN }}

      - uses: Swatinem/rust-cache@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          profile: minimal # minimal component installation (ie, no documentation)

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --locked --release

      - name: Show version information (Rust, cargo, GCC)
        shell: bash
        run: |
          gcc --version || true
          rustup -V
          rustup toolchain list
          rustup default
          cargo -V
          rustc -V

      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19.x

      - name: Find .h file
        run: |
          ls target
        shell: bash

      - name: Find .a file
        run: |
          ls target/release
        shell: bash

      - name: Print version number
        run: |
          echo "Version number: ${{ needs.release-please.outputs.version }}"

      - name: Publish the C static library and header file
        run: |
          VERSION=${{ needs.release-please.outputs.version }}
          ARCHIVE_FILE="momento-protosocket-ffi-$VERSION.arm64-linux.tar.gz"
          HEADER_FILE="./target/momento-protosocket-ffi.h"
          LIBRARY_FILE="./target/release/libmomento_protosocket_ffi.a"
          tar -zcvf $ARCHIVE_FILE $HEADER_FILE $LIBRARY_FILE
          AUTH="Authorization: token ${{ secrets.MOMENTO_MACHINE_USER_GITHUB_TOKEN }}"
          LATEST_RELEASE=$(curl -sH "$AUTH" https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/tags/v${VERSION})
          RELEASE_ID=$(echo $LATEST_RELEASE | jq -r .id)
          GH_ASSET="https://uploads.github.com/repos/${GITHUB_REPOSITORY}/releases/${RELEASE_ID}/assets?name=${ARCHIVE_FILE}"
          echo $GH_ASSET
          curl --data-binary @$ARCHIVE_FILE -H "$AUTH" -H "Content-Type: application/octet-stream" $GH_ASSET
        shell: bash

  build-and-publish-macos-x64:
    runs-on: macos-15-intel
    needs: [release-please]
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.MOMENTO_MACHINE_USER_GITHUB_TOKEN }}

      - name: Install protoc
        run: brew install protobuf

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          profile: minimal # minimal component installation (ie, no documentation)

      - name: Show version information (Rust, cargo, GCC)
        shell: bash
        run: |
          gcc --version || true
          rustup -V
          rustup toolchain list
          rustup default
          cargo -V
          rustc -V

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --locked --release
  
      - name: Find .h file
        run: |
          ls target
        shell: bash

      - name: Find .a file
        run: |
          ls target/release
        shell: bash

      - name: Print version number
        run: |
          echo "Version number: ${{ needs.release-please.outputs.version }}"

      - name: Publish the C static library and header file
        run: |
          VERSION=${{ needs.release-please.outputs.version }}
          ARCHIVE_FILE="momento-protosocket-ffi-$VERSION.x86_64-macos.tar.gz"
          HEADER_FILE="./target/momento-protosocket-ffi.h"
          LIBRARY_FILE="./target/release/libmomento_protosocket_ffi.a"
          tar -zcvf $ARCHIVE_FILE $HEADER_FILE $LIBRARY_FILE
          AUTH="Authorization: token ${{ secrets.MOMENTO_MACHINE_USER_GITHUB_TOKEN }}"
          LATEST_RELEASE=$(curl -sH "$AUTH" https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/tags/v${VERSION})
          RELEASE_ID=$(echo $LATEST_RELEASE | jq -r .id)
          GH_ASSET="https://uploads.github.com/repos/${GITHUB_REPOSITORY}/releases/${RELEASE_ID}/assets?name=${ARCHIVE_FILE}"
          echo $GH_ASSET
          curl --data-binary @$ARCHIVE_FILE -H "$AUTH" -H "Content-Type: application/octet-stream" $GH_ASSET
        shell: bash

  build-and-publish-macos-arm64:
    runs-on: macos-15
    needs: [release-please]
    steps:
      - uses: actions/checkout@v3

      - name: Install protoc
        run: brew install protobuf

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          profile: minimal # minimal component installation (ie, no documentation)

      - name: Show version information (Rust, cargo, GCC)
        shell: bash
        run: |
          gcc --version || true
          rustup -V
          rustup toolchain list
          rustup default
          cargo -V
          rustc -V

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --locked --release
  
      - name: Find .h file
        run: |
          ls target
        shell: bash

      - name: Find .a file
        run: |
          ls target/release
        shell: bash

      - name: Print version number
        run: |
          echo "Version number: ${{ needs.release-please.outputs.version }}"

      - name: Publish the C static library and header file
        run: |
          VERSION=${{ needs.release-please.outputs.version }}
          ARCHIVE_FILE="momento-protosocket-ffi-$VERSION.arm64-macos.tar.gz"
          HEADER_FILE="./target/momento-protosocket-ffi.h"
          LIBRARY_FILE="./target/release/libmomento_protosocket_ffi.a"
          tar -zcvf $ARCHIVE_FILE $HEADER_FILE $LIBRARY_FILE
          AUTH="Authorization: token ${{ secrets.MOMENTO_MACHINE_USER_GITHUB_TOKEN }}"
          LATEST_RELEASE=$(curl -sH "$AUTH" https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/tags/v${VERSION})
          RELEASE_ID=$(echo $LATEST_RELEASE | jq -r .id)
          GH_ASSET="https://uploads.github.com/repos/${GITHUB_REPOSITORY}/releases/${RELEASE_ID}/assets?name=${ARCHIVE_FILE}"
          echo $GH_ASSET
          curl --data-binary @$ARCHIVE_FILE -H "$AUTH" -H "Content-Type: application/octet-stream" $GH_ASSET
        shell: bash
      