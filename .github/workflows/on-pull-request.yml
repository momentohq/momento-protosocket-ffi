name: On pull request

on:
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always
  MOMENTO_API_KEY: ${{ secrets.ALPHA_TEST_AUTH_TOKEN }}

jobs:
  # TODO: verify readme generation

  rustfmt:
    name: Style & Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: rustfmt
        run: make format

      - name: Rigorous lint via Clippy
        run: make lint

  build-and-test-ubuntu:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1

    steps:
      - uses: actions/checkout@v4

      - uses: Swatinem/rust-cache@v2

      - name: Build
        run: make build

      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19.x

      - name: Test Go example
        run: |
          make build-go-example
          cd examples/golang
          go run main_ubuntu.go

  try-linux-build-matrix:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        architecture:
          - { target: aarch64-unknown-linux-gnu, use-cross: true }
          - { target: x86_64-unknown-linux-gnu, use-cross: true }
    env:
      RUSTFLAGS: --print=native-static-libs -C strip=symbols
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.MOMENTO_MACHINE_USER_GITHUB_TOKEN }}

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.architecture.target }}
          override: true
          profile: minimal # minimal component installation (ie, no documentation)
  
      - name: Show version information (Rust, cargo, GCC)
        shell: bash
        run: |
          gcc --version || true
          rustup -V
          rustup toolchain list
          rustup default
          cargo -V
          rustc -V

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.architecture.use-cross }}
          command: build
          args: --locked --release --target=${{ matrix.architecture.target }}
  
      - name: Find .h file
        run: |
          ls target
        shell: bash

      - name: Find .a file
        run: |
          ls target/${{ matrix.architecture.target }}/release
        shell: bash

      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19.x

      - name: Try testing with example
        if: matrix.architecture.target == 'aarch64-unknown-linux-gnu'
        run: |
          cp target/${{ matrix.architecture.target }}/release/libmomento_protosocket_ffi.a examples/golang/libmomento_protosocket_ffi.a
          cp target/momento-protosocket-ffi.h examples/golang/momento-protosocket-ffi.h
          cd examples/golang
          go run main_ubuntu.go

  build-and-test-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - uses: Swatinem/rust-cache@v2

      - name: Install protoc
        run: brew install protobuf

      - name: Build
        run: make build

      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19.x

      - name: Test Go example
        run: |
          make build-go-example
          cd examples/golang
          go run main_macos.go

  try-macos-build-matrix:
    runs-on: macos-latest
    strategy:
      matrix:
        architecture:
          - { target: x86_64-apple-darwin, use-cross: false }
          - { target: aarch64-apple-darwin, use-cross: true }
    env:
      MACOSX_DEPLOYMENT_TARGET: 15.0
      RUSTFLAGS: --print=native-static-libs -C strip=symbols
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.MOMENTO_MACHINE_USER_GITHUB_TOKEN }}

      - name: Install protoc
        run: brew install protobuf

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.architecture.target }}
          override: true
          profile: minimal # minimal component installation (ie, no documentation)

      - name: Show version information (Rust, cargo, GCC)
        shell: bash
        run: |
          gcc --version || true
          rustup -V
          rustup toolchain list
          rustup default
          cargo -V
          rustc -V

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.architecture.use-cross }}
          command: build
          args: --locked --release --target=${{ matrix.architecture.target }}
  
      - name: Find .h file
        run: |
          ls target
        shell: bash

      - name: Find .a file
        run: |
          ls target/${{ matrix.architecture.target }}/release
        shell: bash

      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19.x

      - name: Try testing with example
        if: matrix.architecture.target == 'aarch64-apple-darwin'
        run: |
          cp target/${{ matrix.architecture.target }}/release/libmomento_protosocket_ffi.a examples/golang/libmomento_protosocket_ffi.a
          cp target/momento-protosocket-ffi.h examples/golang/momento-protosocket-ffi.h
          cd examples/golang
          go run main_macos.go

  # TODO: fix windows build if possible -- unable to compile protosocket-rpc because
  # of "no method named `set_reuse_port` found for struct `Socket`"
  # build-windows:
  #   runs-on: windows-latest
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Install protoc
  #       run: choco install protoc

  #     - name: Build
  #       run: cargo build --verbose